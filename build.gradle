plugins {
	id 'groovy'
	id 'java-gradle-plugin'
	id 'jacoco'
	id 'com.gradle.plugin-publish' version '0.21.0'
	id 'pl.allegro.tech.build.axion-release' version '1.13.6'
	id 'io.codearte.nexus-staging' version '0.11.0' apply false
	id 'com.bmuschko.docker-remote-api' version '7.3.0'
}

group 'dk.kmd.helm.chart.publish'
version = scmVersion.version

jar {
	baseName = project.name
	version = project.version
}

wrapper {
	distributionType = Wrapper.DistributionType.ALL
}

sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	jcenter()
}

sourceSets {
	main {
		java { srcDirs = [] }    // no source dirs for the java compiler
		groovy { srcDirs = ["src/main/java", "src/main/groovy"] }  // compile   everything in src/ with groovy
	}

	integration {
		compileClasspath += main.output + test.output
		runtimeClasspath += output + main.output + test.output
		groovy.srcDir 'src/integration/groovy'
		resources.srcDir file('src/integration/resources')
	}
}

dependencies {
	implementation gradleApi()
	implementation localGroovy()

	implementation 'org.ajoberstar.grgit:grgit-core:3.1.0'

	testImplementation(platform('org.spockframework:spock-bom:2.1-M2-groovy-3.0'))
	testImplementation('org.spockframework:spock-core') {
		exclude group: 'org.codehaus.groovy', module: 'groovy-all'
	}
	testImplementation 'org.yaml:snakeyaml:1.30'
	testImplementation 'org.apache.commons:commons-lang3:3.0'
	testImplementation 'uk.org.webcompere:system-stubs-core:2.0.1'

	testImplementation gradleTestKit()
}

tasks.withType(Test) {
	useJUnitPlatform()
	jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
	testLogging {
		events 'PASSED', 'FAILED', 'SKIPPED'
		showStandardStreams = (project.hasProperty('testLoggingEnabled') && Boolean.valueOf(project.property('testLoggingEnabled').toString()))
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "\nTest result: ${result.resultType}"
			println "Test summary: ${result.testCount} tests, " +
						"${result.successfulTestCount} succeeded, " +
						"${result.failedTestCount} failed, " +
						"${result.skippedTestCount} skipped"
		}
	}
}


project.configurations {
	integrationImplementation.extendsFrom testImplementation
	integrationRuntime.extendsFrom testRuntime

	integration {
		extendsFrom project.configurations.testImplementation
		description = 'Dependencies for integration tests'
		transitive = true
		visible = true
	}
}

task buildDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
	inputDir = file('docker')
	images.add('test/helm-chart-publisher-remote:latest')
}

task createDockerContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer) {
	dependsOn buildDockerImage
	targetImageId buildDockerImage.getImageId()
	hostConfig.portBindings = ['8080:80']
	hostConfig.autoRemove = true
}

task startDockerContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerStartContainer) {
	dependsOn createDockerContainer
	targetContainerId createDockerContainer.getContainerId()
}

task stopDockerContainer(type: com.bmuschko.gradle.docker.tasks.container.DockerStopContainer) {
	targetContainerId createDockerContainer.getContainerId()
}

task integrationTest(type: Test) {
	testClassesDirs = project.sourceSets.integration.output.classesDirs
	classpath = sourceSets.integration.runtimeClasspath

	testLogging {
		events 'passed', 'skipped', 'failed'
		showStandardStreams = true
		exceptionFormat = 'full'
	}

	dependsOn startDockerContainer
	finalizedBy stopDockerContainer
}

tasks.check.dependsOn integrationTest
integrationTest.mustRunAfter test

gradlePlugin {
	testSourceSets(sourceSets.integration)
}

jacoco {
	toolVersion = '0.8.2'
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

pluginBundle {
	website = 'https://github.com/r-d-kmd/gradle-helm-chart-publisher'
	vcsUrl = 'https://github.com/r-d-kmd/gradle-helm-chart-publisher'
	description = 'Helm chart publish plugin using git repositories (GitHub for example) as a helm chart repository.'
	tags = ['helm', 'chart', 'release', 'publish', 'git', 'github']

	plugins {
		helmChartRelease {
			id = 'dk.kmd.helm.chart.publish'
			displayName = 'helm-chart-publisher'
		}
	}

	mavenCoordinates {
		groupId = 'dk.kmd.helm.chart.publish'
		artifactId = 'helm-chart-publisher'
	}
}
